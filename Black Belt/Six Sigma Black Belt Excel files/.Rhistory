portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type="box", min=.20, max=.80)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="StdDev")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI_old', trace=TRUE)
ef <- extractEfficientFrontier(optPort, match.col = "StdDev", n.portfolios = 25,
risk_aversion = NULL)
install.packages('PerformanceAnalytics')
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI_old', trace=TRUE)
library(PortfolioAnalytics)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
install.packages('PerfomanceAnalytics')
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
install.packages('PerformanceAnalytics')
install.packages("PerformanceAnalytics")
install.packages('PortfolioAnalytics')
tickers <- c("FB", "AAPL", "AMZN", "NFLX", "GOOGL", "SQ", "NVDA")
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices,
getSymbols.yahoo(ticker, from='2016-01-03', periodicity = 'daily', auto.assign=FALSE)[,4])
}
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices,
getSymbols.yahoo(ticker, from='2016-01-03', periodicity = 'daily', auto.assign=FALSE)[,4])
}
portfolioReturns <- na.omit(ROC(portfolioPrices))
portf <- portfolio.spec(colnames(portfolioReturns))
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type="box", min=.20, max=.80)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="StdDev")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI_old', trace=TRUE)
optPort
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
install.packages('quantmod','PerformanceAnalytics','PortfolioAnalytics')
install.packages('quantmod')
install.packages('PerformanceAnalytics')
install.packages('PortfolioAnalytics')
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
tickers <- c("FB", "AAPL", "AMZN", "NFLX", "GOOGL", "SQ", "NVDA")
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices,
getSymbols.yahoo(ticker, from='2016-01-03', periodicity = 'daily', auto.assign=FALSE)[,4])
}
portfolioReturns <- na.omit(ROC(portfolioPrices))
portf <- portfolio.spec(colnames(portfolioReturns))
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type="box", min=.20, max=.80)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="StdDev")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI_old', trace=TRUE)
optPort
ef <- extractEfficientFrontier(optPort, match.col = "StdDev", n.portfolios = 25,
risk_aversion = NULL)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI', trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA', search_size = 30000 trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA', search_size = 30000, trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA', search_size = 30000)
portf <- portfolio.spec(colnames(portfolioReturns))
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type="box", min=.20, max=.80)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="StdDev")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA', search_size = 30000)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'PAO', search_size = 30000)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random', search_size = 30000)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random')
port   =  portfolio.spec(assets = c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
port   =  add.constraint(port, type = "box", min = 0.05, max = 0.8)
port   =  add.constraint(portfolio = port, type = "full_investment")
rportfolios   =  random_portfolios(port, permutations = 50000, rp_method = "sample")
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "random", rp = rportfolios)
maxret.port   =  add.objective(port, type = "return", name = "mean")
maxret.opt   =  optimize.portfolio(returns.data, maxret.port, optimize_method = "random",  rp = rportfolios)
minret   =  0.06/100
maxret   =  maxret.opt$weights %*% meanReturns
vec   =  seq(minret, maxret, length.out = 100)
eff.frontier   =  data.frame(Risk = rep(NA, length(vec)),
Return = rep(NA, length(vec)),
SharpeRatio = rep(NA, length(vec)))
frontier.weights   =  mat.or.vec(nr = length(vec), nc = ncol(returns.data))
colnames(frontier.weights)   =  colnames(returns.data)
for(i in 1:length(vec)){
eff.port   =  add.constraint(port, type = "return", name = "mean", return_target = vec[i])
eff.port   =  add.objective(eff.port, type = "risk", name = "var")
eff.port   =  optimize.portfolio(returns.data, eff.port, optimize_method = "ROI")
eff.frontier$Risk[i]   =  sqrt(t(eff.port$weights) %*% covMat %*% eff.port$weights)
eff.frontier$Return[i]   =  eff.port$weights %*% meanReturns
eff.frontier$Sharperatio[i]   =  eff.port$Return[i] / eff.port$Risk[i]
frontier.weights[i,] = eff.port$weights
print(paste(round(i/length(vec) * 100, 0), "% done..."))
}
feasible.sd   =  apply(rportfolios, 1, function(x){
return(sqrt(matrix(x, nrow = 1) %*% covMat %*% matrix(x, ncol = 1)))
})
feasible.means   =  apply(rportfolios, 1, function(x){
return(x %*% meanReturns)})
feasible.sr   =  feasible.means / feasible.sd
optimize.portfolio(R = returns.data, portfolio = maxret.port, optimize_method = "random", rp = rportfolios)
StockData  = getSymbols(c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
prices.data   =  merge.zoo(MSFT[,6], SBUX[,6], IBM[,6], AAPL[,6], GSPC[,6], AMZN[,6])
returns.data   =  CalculateReturns(prices.data)
returns.data   =  na.omit(returns.data)
port   =  portfolio.spec(assets = c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
port   =  add.constraint(port, type = "box", min = 0.05, max = 0.8)
port   =  add.constraint(portfolio = port, type = "full_investment")
rportfolios   =  random_portfolios(port, permutations = 50000, rp_method = "sample")
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "random", rp = rportfolios)
maxret.port   =  add.objective(port, type = "return", name = "mean")
maxret.opt   =  optimize.portfolio(returns.data, maxret.port, optimize_method = "random",  rp = rportfolios)
minret   =  0.06/100
maxret   =  maxret.opt$weights %*% meanReturns
vec   =  seq(minret, maxret, length.out = 100)
eff.frontier   =  data.frame(Risk = rep(NA, length(vec)),
Return = rep(NA, length(vec)),
SharpeRatio = rep(NA, length(vec)))
frontier.weights   =  mat.or.vec(nr = length(vec), nc = ncol(returns.data))
colnames(frontier.weights)   =  colnames(returns.data)
for(i in 1:length(vec)){
eff.port   =  add.constraint(port, type = "return", name = "mean", return_target = vec[i])
eff.port   =  add.objective(eff.port, type = "risk", name = "var")
eff.port   =  optimize.portfolio(returns.data, eff.port, optimize_method = "ROI")
eff.frontier$Risk[i]   =  sqrt(t(eff.port$weights) %*% covMat %*% eff.port$weights)
eff.frontier$Return[i]   =  eff.port$weights %*% meanReturns
eff.frontier$Sharperatio[i]   =  eff.port$Return[i] / eff.port$Risk[i]
frontier.weights[i,] = eff.port$weights
print(paste(round(i/length(vec) * 100, 0), "% done..."))
}
feasible.sd   =  apply(rportfolios, 1, function(x){
return(sqrt(matrix(x, nrow = 1) %*% covMat %*% matrix(x, ncol = 1)))
})
feasible.means   =  apply(rportfolios, 1, function(x){
return(x %*% meanReturns)})
feasible.sr   =  feasible.means / feasible.sd
optimize.portfolio(R = returns.data, portfolio = maxret.port, optimize_method = "random", rp = rportfolios)
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type="box", min=.20, max=.80)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="VaR")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random')
portf <- add.constraint(portf, type='fullinvestment')
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type='fullinvestment')
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="VaR")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random')
rportfolios   =  random_portfolios(port, permutations = 50000, rp_method = "sample")
rportfolios   =  random_portfolios(portf, permutations = 50000, rp_method = "sample")
rportfolios   =  random_portfolios(portf, permutations = 50000, rp_method = "sample")
StockData  = getSymbols(c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
prices.data   =  merge.zoo(MSFT[,6], SBUX[,6], IBM[,6], AAPL[,6], GSPC[,6], AMZN[,6])
returns.data   =  CalculateReturns(prices.data)
returns.data   =  na.omit(returns.data)
port   =  portfolio.spec(assets = c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
port   =  add.constraint(port, type = "box", min = 0.05, max = 0.8)
port   =  add.constraint(portfolio = port, type = "full_investment")
rportfolios   =  random_portfolios(port, permutations = 50000, rp_method = "sample")
minvar.port   =  add.objective(port, type = "risk", name = "var")
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
StockData  = getSymbols(c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
prices.data   =  merge.zoo(MSFT[,6], SBUX[,6], IBM[,6], AAPL[,6], GSPC[,6], AMZN[,6])
returns.data   =  CalculateReturns(prices.data)
returns.data   =  na.omit(returns.data)
port   =  portfolio.spec(assets = c("MSFT", "SBUX", "IBM", "AAPL", "^GSPC", "AMZN"))
port   =  add.constraint(port, type = "box", min = 0.05, max = 0.8)
port   =  add.constraint(portfolio = port, type = "full_investment")
rportfolios   =  random_portfolios(port, permutations = 50000, rp_method = "sample")
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "GenSA", search_size = 20000,rp = rportfolios)
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "GenSA",rp = rportfolios)
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "pso",rp = rportfolios)
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "pso",rp = rportfolios)
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "pso",rp = rportfolios)
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "DEoptim",rp = rportfolios)
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "DEoptim")
minvar.port   =  add.objective(port, type = "risk", name = "var")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method = "DEoptim")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method =search_size = 20000, trace = FALSE, rp = NULL,
momentFUN = "set.portfolio.moments", message = FALSE)")
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method =search_size = 20000, trace = FALSE, rp = NULL,
momentFUN = "set.portfolio.moments", message = FALSE)
minvar.opt   =  optimize.portfolio(returns.data, minvar.port, optimize_method='GenSA', search_size = 20000, trace = FALSE, rp = NULL,
momentFUN = "set.portfolio.moments", message = FALSE)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
tickers <- c("FB", "AAPL", "AMZN", "NFLX", "GOOGL", "SQ", "NVDA")
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices,
getSymbols.yahoo(ticker, from='2016-01-03', periodicity = 'daily', auto.assign=FALSE)[,4])
}
portfolioReturns <- na.omit(ROC(portfolioPrices))
portf <- portfolio.spec(colnames(portfolioReturns))
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type='fullinvestment')
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="VaR")
rportfolios   =  random_portfolios(portf, permutations = 50000, rp_method = "sample")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random')
portf <- add.constraint(portf, type='box', min=0.1, max=0.8)
portf <- add.constraint(portf, type="weight_sum", min_sum=1, max_sum=1)
portf <- add.constraint(portf, type='box', min=0.1, max=0.8)
portf <- add.objective(portf, type="return", name="mean")
portf <- add.objective(portf, type="risk", name="VaR")
rportfolios   =  random_portfolios(portf, permutations = 50000, rp_method = "sample")
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random')
optPort
ef <- extractEfficientFrontier(optPort, match.col = "VaR", n.portfolios = 25,
risk_aversion = NULL)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'random',trace=TRUE)
ef <- extractEfficientFrontier(optPort, match.col = "VaR", n.portfolios = 25,
risk_aversion = NULL)
chart.EfficientFrontier(ef,
match.col = "StdDev", n.portfolios = 25, xlim = NULL, ylim = NULL,
cex.axis = 0.8, element.color = "darkgray", main = "Efficient Frontier",
RAR.text = "SR", rf = 0, tangent.line = TRUE, cex.legend = 0.8,
chart.assets = TRUE, labels.assets = TRUE, pch.assets = 21,
cex.assets = 0.8)
chart.EfficientFrontier(ef,
match.col = "VaR", n.portfolios = 25, xlim = NULL, ylim = NULL,
cex.axis = 0.8, element.color = "darkgray", main = "Efficient Frontier",
RAR.text = "SR", rf = 0, tangent.line = TRUE, cex.legend = 0.8,
chart.assets = TRUE, labels.assets = TRUE, pch.assets = 21,
cex.assets = 0.8)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'ROI_old',trace=TRUE)
?optimize.portfolio
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA',trace=TRUE)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA')
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA',search_size = 200000)
install.packages('GenSA')
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'GenSA',search_size = 200000)
optPort
\install.packages('DEoptim')
install.packages('DEoptim')
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'DEoptim',search_size = 200000)
ef <- extractEfficientFrontier(optPort, match.col = "VaR", n.portfolios = 25,
risk_aversion = NULL)
optPort <- optimize.portfolio(portfolioReturns, portf, optimize_method = 'DEoptim',search_size = 200000,trace=TRUE)
ef <- extractEfficientFrontier(optPort, match.col = "VaR", n.portfolios = 25,
risk_aversion = NULL)
chart.EfficientFrontier(ef,
match.col = "VaR", n.portfolios = 25, xlim = NULL, ylim = NULL,
cex.axis = 0.8, element.color = "darkgray", main = "Efficient Frontier",
RAR.text = "SR", rf = 0, tangent.line = TRUE, cex.legend = 0.8,
chart.assets = TRUE, labels.assets = TRUE, pch.assets = 21,
cex.assets = 0.8)
imdb %>%
filter(diretor == "Steven Spielberg") %>%
group_by(ano) %>%
summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = ano, y = nota_media))
install.packages('ggplot2')
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
imdb %>%
filter(diretor == "Steven Spielberg") %>%
group_by(ano) %>%
summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = ano, y = nota_media))
imdb
imdb <- readr::read_rds("data/imdb.rds")
ggplot(data = imdb)
imdb <- readr::read_rds("data/imdb.rds")
install.packages("tidyr")
install.packages("tibble")
install.packages("tibble")
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
imdb <- readr::read_rds("data/imdb.rds")
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
imdb <- readr::read_rds("data/imdb.rds")
imdb
library(tibble)
imdb <- readr::read_rds("data/imdb.rds")
ggplot(data = imdb)
imdb %>%
filter(diretor == "Steven Spielberg") %>%
group_by(ano) %>%
summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = ano, y = nota_media))
imdb <-read_rds("data/imdb.rds")
library(tibble)
library(tibble)
library(dplyr)
library(ggplot2)
library(tidyr)
imdb <-read_rds("data/imdb.rds")
install.packages('tidyverse')
library(tidyverse)
imdb <- readr::read_rds("data/imdb.rds")
imdb <- readr::read_rds("C:\Users\bruno\Documents\imdb.rds")
imdb <- readr::read_rds("C:/Users/bruno/Documents/imdb.rds")
summarise(imdb)
imdb %>%
filter(diretor == "Steven Spielberg") %>%
group_by(ano) %>%
summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = ano, y = nota_media))
imdb
filmelongo<-imdb%>%
filter(duracao>120)
filmebom<-imdb %>%
filter(ano > 2010 & nota_imdb > 8.5)
filmebom
View(filmebom)
View(filmebom)
filmemuitobom<-imdb %>%
filter(receita > orcamento | nota_imdb > 9)
View(filmemuitobom)
View(filmemuitobom)
filmemuitobom<-imdb %>%
filter(receita > orcamento ¨& nota_imdb > 9)
filmemuitobom<-imdb %>%
filter(receita > orcamento ¨& nota_imdb > 9.5)
View(filmemuitobom)
View(filmemuitobom)
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(tidyverse)
filmemuitobom<-imdb %>%
filter(receita > orcamento & nota_imdb > 9)
imdb <- readr::read_rds("C:/Users/bruno/Documents/imdb.rds")
filmemuitobom<-imdb %>%
filter(receita > orcamento & nota_imdb > 9)
View(filmemuitobom)
View(filmemuitobom)
install.packages("g.data")
library(g.data)
setwd("~/Machine Learning/Black Belt/Six Sigma Black Belt Excel files")
setwd("~/Machine Learning/Black Belt/Six Sigma Black Belt Excel files")
tab<-read.xls('03_09_IndependenceTestData.xls', header=TRUE)
library(g.data)
tab<-read.xls('03_09_IndependenceTestData.xls', header=TRUE)
library(gdata)
install.packages(gdata)
install.packages('xlsx')
library(xlsx)
tab<-read.xlsx('03_09_IndependenceTestData.xls', header=TRUE)
tab<-read.xlsx('03_09_IndependenceTestData.xls', header=TRUE,sheetIndex = 1)
View(tab)
View(tab)
tab[2:,2:]
tab[2:3,1:2]
tab[1::]
tab[,2:]
tab[2,]
tab[1:]
tab[1:-1]
nrow(tab)
tab[1:nrow(tab),2:ncol(tab)]
tab2<-tab[1:nrow(tab),2:ncol(tab)]
View(tab2)
View(tab2)
chisq.test(tab2)
tab2<-tab[1:nrow(tab),C('Hospital.A','Hospital.B','Hospital.C')]
tab2<-tab[1:nrow(tab),C('Hospital.A','Hospital.B','Hospital.D')]
tab2<-tab[1:nrow(tab),factor(C('Hospital.A','Hospital.B','Hospital.D'))]
tab2<-tab[1:nrow(tab),lista('Hospital.A','Hospital.B','Hospital.D')]
tab2<-tab[1:nrow(tab),('Hospital.A','Hospital.B','Hospital.D')]
tab2<-tab[1:nrow(tab),select.list('Hospital.A','Hospital.B','Hospital.D')]
tab2<-tab[1:nrow(tab),c(2,3,5)]
View(tab2)
View(tab2)
chisq.test(tab2)
npar<-read.xlsx('03_10_MediansData',header=TRUE,sheetIndex = 1)
npar<-read.xlsx('03_10_MediansData.xls',header=TRUE,sheetIndex = 1)
View(npar)
View(npar)
qqnorm(npar[,1])
qqline(npar[,1])
qqnorm(npar[,1])
qqline(npar[,1])
qqnorm(npar[,2])
qqline(npar[,2])
qqnorm(npar[,3])
qqline(npar[,3])
qqnorm(npar[,2])
qqline(npar[,2])
qqnorm(npar[,3])
qqline(npar[,3])
qqnorm(npar[,1])
qqline(npar[,1])
qqnorm(npar[,2])
qqline(npar[,2])
qqnorm(npar[,3])
qqline(npar[,3])
qqnorm(npar[,1])+
qqline(npar[,1])
qqnorm(npar[,1])+
qqline(npar[,1])+
qqnorm(npar[,2])
library(ggplot2)
qqnorm(npar[,1])+
qqline(npar[,1])+
qqnorm(npar[,2])
qqnorm(npar[,1])+
qqline(npar[,1])+
qqnorm(npar[,2])
qqnorm(npar[,1])+
qqline(npar[,1])
qqnorm(npar[,1])
qqline(npar[,1])
qqline(npar[,2])
qqnorm(npar[,2])
x1<-qqnorm(npar[,1])+
x2<-qqline(npar[,1])
x3<-qqnorm(npar[,2])
x4<-qqline(npar[,2])
x5<-qqnorm(npar[,3])
x6<-qqline(npar[,3])
ggplot(df, aes(npar)) +                    # basic graphical object
geom_line(aes(y=x1), colour="red") +  # first layer
geom_line(aes(y=x2), colour="green")
plot(x1,x2,type="l",col="red")
x1<-qqnorm(npar[,1])+
x2<-qqline(npar[,1])
x3<-qqnorm(npar[,2])
x4<-qqline(npar[,2])
x5<-qqnorm(npar[,3])
x6<-qqline(npar[,3])
x1<-qqnorm(npar[,1])
x2<-qqline(npar[,1])
x3<-qqnorm(npar[,2])
x4<-qqline(npar[,2])
x5<-qqnorm(npar[,3])
x6<-qqline(npar[,3])
plot(x1,x2,type="l",col="red")
plot(x1,x2,type="2",col="red")
plot(x1,x2,type="3",col="red")
plot(x1,x2,col="red")
plot(x1,x2,col=c("red",'green'))
lines(x,y2,col="green")
plot(x1,x3,col=c("red",'green'))
lines(x2,y4,col="green")
plot(x1,x3,col=c("red",'green'))
a<-wilcox.test(npar[,1],npar[,2], correct=TRUE)
plot(a)
wilcox.test(npar[,1],npar[,2], correct=TRUE)
wilcox.test(npar[,1],npar[,2], correct=FALSE)
lin<-read.xlsx('03_12_RegressionData', header=TRUE,sheetIndex = 1)
lin<-read.xlsx('03_12_RegressionData.xls', header=TRUE,sheetIndex = 1)
head(lin)
scatter.smooth(x=lin[,3], y=lin[,1], main="distancia ~ Speed")
lm(formula = lin[,3] ~ lin[,1], data = cars)
b>-lm(formula = lin[,3] ~ lin[,1], data = cars)
b<-lm(formula = lin[,3] ~ lin[,1], data = cars)
plot(b)
return(b)
plot(b)
retunr
return
f <- summary(b)$fstatistic
f
summary(f)
